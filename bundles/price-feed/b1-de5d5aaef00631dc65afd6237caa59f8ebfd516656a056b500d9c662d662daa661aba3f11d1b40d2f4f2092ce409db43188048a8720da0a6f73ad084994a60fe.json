{
  "moduleFormat": "endoZipBase64",
  "endoZipBase64": "",
  "endoZipBase64Sha512": "de5d5aaef00631dc65afd6237caa59f8ebfd516656a056b500d9c662d662daa661aba3f11d1b40d2f4f2092ce409db43188048a8720da0a6f73ad084994a60fe"
}